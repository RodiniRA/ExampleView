<Application x:Class="AmTrustExample.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:OtherControls="AmTrustExample\Styles\Controls"
             xmlns:ribbon="..\Ribbon\Generic.xaml"
             xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
             xmlns:userControl="clr-namespace:AmTrustExample.UserControls"
             xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
             xmlns:gif="https://github.com/XamlAnimatedGif/XamlAnimatedGif"
             StartupUri="Views/MainWindow.xaml">
    <Application.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
                <ResourceDictionary Source="Styles\Controls.ScrollBars.xaml"/>
                <ResourceDictionary Source="/Resources/Icons.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--Brushes that are constant across all Accents-->
            <SolidColorBrush x:Key="ButtonBackgroundBrush" Color="Transparent" options:Freeze="True"/>
            <SolidColorBrush x:Key="RibbonBackgroundBrush" Color="LightGray" Opacity="1" options:Freeze="True" />
            <SolidColorBrush x:Key="NaviMainBackgroundBrush" Color="LightGray" Opacity=".5" options:Freeze="True" />



            <Style x:Key="VirtualisedMetroTreeView"
           TargetType="{x:Type TreeView}"
           BasedOn="{StaticResource MetroTreeView}">
                <Setter Property="VirtualizingStackPanel.IsVirtualizing"
                Value="True" />
                <Setter Property="VirtualizingStackPanel.VirtualizationMode"
                Value="Recycling" />
            </Style>

            <Style TargetType="{x:Type TreeView}"
           BasedOn="{StaticResource MetroTreeView}">
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type TreeViewItem}"
           BasedOn="{StaticResource MetroTreeViewItem}">
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Image Name="img"
						   Width="20"
						   Height="20"
						   Stretch="Fill"
						   Source="Images/testImage.jpg"/>
                                <TextBlock Text="{Binding}" Margin="5,0" />
                            </StackPanel>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--for the time being, have to force set the HeaderTemplate on the top-level nodes of a tree
            above style will not apply to top level nodes-->
            <DataTemplate x:Key="TEST">
                <StackPanel Orientation="Horizontal">
                    <Image Name="img"
						   Width="20"
						   Height="20"
						   Stretch="Fill"
						   Source="Images/testImage.jpg"/>
                    <TextBlock Text="{Binding}" Margin="5,0" />
                </StackPanel>
            </DataTemplate>

            <!--<Style TargetType="{x:Type TreeView}">
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type TreeViewItem}">
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Image Name="img"
						   Width="20"
						   Height="20"
						   Stretch="Fill"
						   Source="Images/testImage.jpg"/>
                                <TextBlock Text="{Binding}" Margin="5,0" />
                            </StackPanel>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>-->

            <Style x:Key="DockPanelStyle" TargetType="{x:Type DockPanel}">
                <Setter Property="Background" Value="{DynamicResource AppBaseBrush}"/>
            </Style>

            <Style x:Key="ToolBarBackgroundStyle" TargetType="{x:Type StackPanel}">
                <Setter Property="Background">
                    <Setter.Value>

                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                            <GradientStop Offset="0" Color="{DynamicResource GradientColor}"/>
                            <GradientStop Offset="0.75" Color="Transparent"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ToolBarButtonStyle" TargetType="{x:Type Button}"  BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Padding" Value="2"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="False">
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AppBaseBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="CollapseExpandNaviButtonStyle" TargetType="{x:Type Button}"  BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Margin" Value="2,0,0,2"/>
                <Setter Property="Padding" Value="2"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="False">
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AppBaseBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>


            <!--Direct copy of the MahApps FlatButtonStyle. Can customize it across skins this way-->
            <Style TargetType="{x:Type Button}">
                <Setter Property="Background"
                Value="{DynamicResource ButtonBackgroundBrush}" />
                <Setter Property="Foreground"
                Value="{DynamicResource FlatButtonForegroundBrush}" />
                <Setter Property="FontSize"
                Value="{DynamicResource FlatButtonFontSize}" />
                <!--<Setter Property="MaxHeight" Value="50"/>
                <Setter Property="MaxWidth" Value="50"/>-->
                <Setter Property="Padding"
                Value="10,5,10,5" />
                <Setter Property="BorderThickness"
                Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="Border"
                            Margin="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed"
                                 Value="True">
                                    <Setter Property="Background"
                                    Value="{DynamicResource FlatButtonPressedBackgroundBrush}"
                                    TargetName="Border" />
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
                                </Trigger>
                                <Trigger Property="IsEnabled"
                                 Value="False">
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource GrayBrush2}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver"
                                 Value="True">
                                    <Setter Property="Background"
                                    Value="DarkGray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <!--Giving the same style as the GroupBox Buttons-->
            <Style TargetType="{x:Type userControl:DropDownButton}">

                <Setter Property="Background"
                Value="{DynamicResource ButtonBackgroundBrush}" />
                <Setter Property="Foreground"
                Value="{DynamicResource FlatButtonForegroundBrush}" />
                <Setter Property="FontSize"
                Value="{DynamicResource FlatButtonFontSize}" />
                <Setter Property="Padding"
                Value="10,5,10,0" />
                <Setter Property="BorderThickness"
                Value="0" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type userControl:DropDownButton}">
                            <Border x:Name="Border"
                            Margin="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                                <StackPanel>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                                    <Path VerticalAlignment="Center" Margin="0,1,0,0" HorizontalAlignment="Center" Fill="Black" Data="M 0 0 L 3 3 L 6 0 Z"/>

                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed"
                                 Value="True">
                                    <Setter Property="Background"
                                    Value="{DynamicResource FlatButtonPressedBackgroundBrush}"
                                    TargetName="Border" />
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
                                </Trigger>
                                <Trigger Property="IsEnabled"
                                 Value="False">
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource GrayBrush2}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver"
                                 Value="True">
                                    <Setter Property="Background"
                                    Value="DarkGray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type GridSplitter}">
                <Setter Property="Background" Value="{DynamicResource AppBaseBrush}"/>
                <Setter Property="Width" Value="2"/>
            </Style>

            <Style x:Key="ButtonSkin" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Background" Value="{DynamicResource AppBaseBrush}"/>
                <Setter Property="Foreground" Value="#ffffff"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border x:Name="Content" Background="{TemplateBinding Background}">
                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                      Height="30" Width="30" Margin="10,5">
                                        <ContentPresenter.ToolTip>
                                            <StackPanel Orientation="Horizontal">
                                                <Image gif:AnimationBehavior.SourceUri="Images/sparkles.gif" Height="50" Width="50"/>
                                                <TextBox Text="{TemplateBinding Name}" BorderThickness="0" FontWeight="ExtraBold"/>
                                                <Image gif:AnimationBehavior.SourceUri="Images/sparkles.gif" Height="50" Width="50"/>
                                            </StackPanel>
                                        </ContentPresenter.ToolTip>
                                    </ContentPresenter>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver"  Value="True">
                        <Setter Property="Background" Value="{DynamicResource TabHoverBrush}"/>
                        <Setter Property="Foreground" Value="#ffffff"/>
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="{DynamicResource NaviMainBackgroundBrush}"/>
                        <Setter Property="Foreground" Value="#000000"/>
                        <Setter Property="FontWeight" Value="Bold"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="FlyoutTabItemStyle" TargetType="{x:Type TabItem}" BasedOn="{StaticResource MetroTabItem}">
                <Setter Property="FontSize" Value="14"/>
            </Style>

            <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>

                                <ScrollContentPresenter Grid.Column="1"/>

                                <RepeatButton Grid.Column="0" HorizontalAlignment="Left" Style="{DynamicResource RepeatButtonStyleLeft}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                <RepeatButton Grid.Column="2" HorizontalAlignment="Right" Style="{DynamicResource RepeatButtonStyleRight}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RepeatButtonStyleRight" TargetType="{x:Type RepeatButton}">
                <Setter Property="Command" Value="ScrollBar.LineRightCommand"/>
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="Margin" Value="5,0,0,0"/>
                <Setter Property="Padding" Value="5,0,0,0"/>
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="Width" Value="10"/>
                <Setter Property="Template">
                    <Setter.Value>

                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid x:Name="Root">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="HoverPath">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1"
                                                                  Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="Blur">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1"
                                                                  Value="0.5" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <Storyboard />
                                        </VisualState>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="Root">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1"
                                                                  Value="0.5" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Button x:Name="RepeatButtonRight" Command="ScrollBar.ScrollHereCommand"/>
                                <Path Data="F1 M 511.047,352.682L 511.047,342.252L 517.145,347.467L 511.047,352.682 Z "
                              Height="10"
                              Stretch="Uniform"
                              Width="6"
                              Fill="{DynamicResource GrayBrush1}" />
                                <Path x:Name="HoverPath"
                              Data="F1 M 511.047,352.682L 511.047,342.252L 517.145,347.467L 511.047,352.682 Z "
                              Height="10"
                              Stretch="Uniform"
                              Width="6"
                              UseLayoutRounding="False"
                              Opacity="0"
                              Margin="1,1,0,0"
                              Fill="{DynamicResource BlackBrush}" />
                                <Path x:Name="Blur"
                              Data="F1 M 511.047,352.682L 511.047,342.252L 517.145,347.467L 511.047,352.682 Z "
                              Height="10"
                              Stretch="Uniform"
                              Width="6"
                              UseLayoutRounding="False"
                              Opacity="0"
                              Margin="1,1,0,0"
                              Fill="{DynamicResource BlackBrush}">
                                    <Path.Effect>
                                        <BlurEffect />
                                    </Path.Effect>
                                </Path>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="RepeatButtonRight" Value="DarkGray"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="RepeatButtonRight" Value="{DynamicResource FileTabBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RepeatButtonStyleLeft" TargetType="{x:Type RepeatButton}">
                <Setter Property="Command" Value="ScrollBar.LineLeftCommand"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="Margin" Value="0,0,5,0"/>
                <Setter Property="Padding" Value="0,0,5,0"/>
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="Width" Value="10"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid x:Name="Root">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="HoverPath">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1"
                                                                  Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="Blur">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1"
                                                                  Value="0.5" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <Storyboard />
                                        </VisualState>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="Root">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1"
                                                                  Value="0.5" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Button x:Name="RepeatButtonLeft" Command="ScrollBar.ScrollHereCommand"/>
                                <Path Data="F1 M 110.692,342.252L 110.692,352.682L 104.594,347.467L 110.692,342.252 Z "
                              Height="10"
                              Stretch="Uniform"
                              Width="6"
                              Fill="{DynamicResource GrayBrush1}" />
                                <Path x:Name="HoverPath"
                              Data="F1 M 110.692,342.252L 110.692,352.682L 104.594,347.467L 110.692,342.252 Z "
                              Height="10"
                              Stretch="Uniform"
                              Width="6"
                              UseLayoutRounding="False"
                              Opacity="0"
                              Margin="0,1,0,0"
                              Fill="{DynamicResource BlackBrush}" />
                                <Path x:Name="Blur"
                              Data="F1 M 110.692,342.252L 110.692,352.682L 104.594,347.467L 110.692,342.252 Z "
                              Height="10"
                              Stretch="Uniform"
                              Width="6"
                              UseLayoutRounding="False"
                              Opacity="0"
                              Margin="0,1,0,0"
                              Fill="{DynamicResource BlackBrush}">
                                    <Path.Effect>
                                        <BlurEffect />
                                    </Path.Effect>
                                </Path>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="RepeatButtonLeft" Value="DarkGray"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="RepeatButtonLeft" Value="{DynamicResource FileTabBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--The LightGray background that the tabitems open. Faking it so that the width exceedes the right-most boundry of the 2nd TabControl-->
            <Style x:Key="RibbonStackPanel" TargetType="{x:Type StackPanel}">
                <Setter Property="Margin" Value="-78,-5,-5,0"/>
                <Setter Property="Background" Value="{DynamicResource RibbonBackgroundBrush}"/>
            </Style>

            <Style x:Key="CloseFlyoutButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MetroCircleButtonStyle}">
                <Setter Property="Width" Value="40"/>
                <Setter Property="Height" Value="40"/>
                <Setter Property="FontFamily" Value="Segoe UI Symbol"/>
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="Margin" Value="20,0,0,0"/>
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Rectangle Width="20"
                           Height="15"
                           Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Path=Foreground}">
                                <Rectangle.LayoutTransform>
                                    <RotateTransform Angle="180"/>
                                </Rectangle.LayoutTransform>
                                <Rectangle.OpacityMask>
                                    <VisualBrush Stretch="Fill">
                                        <VisualBrush.Visual>
                                            <Canvas Width="48"
                                        Height="48"
                                        Clip="F1 M 0,0L 48,0L 48,48L 0,48L 0,0"
                                        UseLayoutRounding="False">
                                                <Path Width="25"
                                          Height="18"
                                          Canvas.Left="12"
                                          Canvas.Top="15"
                                          Stretch="Fill"
                                          Fill="Black"
                                          Data="F1 M 12,22L 12,26L 28.25,26L 21,33L 27.5,33L 37,24L 27.5,15L 21,15L 28.25,22L 12,22 Z " />
                                            </Canvas>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="FlyoutLabelStyle" TargetType="{x:Type Label}">
                <Setter Property="FontSize" Value="24"/>
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="Grid.Row" Value="0"/>
                <Setter Property="Margin" Value="0,0,20,0"/>
            </Style>

            <Style x:Key="FlyoutBackground" TargetType="{x:Type Control}">
                <Setter Property="Background" Value="{DynamicResource TabHoverBrush}"/>
            </Style>

            <Style x:Key="SubFlyoutBackground" TargetType="{x:Type Control}">
                <Setter Property="Background" Value="{DynamicResource AppBaseBrush}"/>
                <!--Can override width at the element level if flyout needs to be wider-->
                <Setter Property="Width" Value="400"/>
                <!--has to be half the actual margin you want. To appear 250 from the left side, give margin of 125-->
                <Setter Property="Margin" Value="125,0,0,0"/>
            </Style>

            <Style x:Key="ListMenuButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="Background" Value="{DynamicResource AppBaseBrush}"/>
            </Style>

            <Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
                <Setter Property="Margin" Value="1,0,0,0"/>
                <Setter Property="Padding" Value="-3"/>
            </Style>

            <!--This style is for the Ribbon Tabs up top-->
            <Style x:Key="RibbonTabItemStyle" TargetType="{x:Type Controls:MetroTabItem}" BasedOn="{StaticResource {x:Type Controls:MetroTabItem}}">
                <Setter Property="Background" Value="{DynamicResource AppBaseBrush}"/>
                <Setter Property="Foreground" Value="White"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid>
                                <Border x:Name="Header" Padding="25,0" Background="{TemplateBinding Background}" Height="30">
                                    <ContentPresenter Content="{TemplateBinding Header}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource RibbonBackgroundBrush}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource FileTabBrush}"/>
                                    <Setter Property="TextElement.FontWeight" Value="Bold"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="False"/>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="{DynamicResource TabHoverBrush}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="FileTabItemStyle" TargetType="{x:Type Controls:MetroTabItem}" BasedOn="{StaticResource RibbonTabItemStyle}">
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{DynamicResource FileTabBrush}"/>
                        <Setter Property="Foreground" Value="White"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="DocumentTabItemStyle" TargetType="{x:Type Controls:MetroTabItem}" BasedOn="{StaticResource {x:Type Controls:MetroTabItem}}">
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{DynamicResource RibbonBackgroundBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource AppBaseBrush}"/>
                    </Trigger>
                </Style.Triggers>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Controls:MetroTabItem}">
                            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <StackPanel Orientation="Horizontal">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="150"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="5"/>
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter x:Name="ContentSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" 
                                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" 
                                                              TextElement.Foreground="{TemplateBinding Foreground}" 
                                                              TextElement.FontWeight="{TemplateBinding Controls:ControlsHelper.HeaderFontWeight}" 
                                                              TextElement.FontStretch="{TemplateBinding Controls:ControlsHelper.HeaderFontStretch}" 
                                                              TextElement.FontSize="{TemplateBinding Controls:ControlsHelper.HeaderFontSize}" 
                                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="3,0,5,0" 
                                                              RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="0"
                                                              />
                                        <Button Width="14" x:Name="PART_CloseButton" Background="{DynamicResource GrayNormalBrush}" CommandParameter="{TemplateBinding CloseTabCommandParameter}" 
                                                    Command="{TemplateBinding CloseTabCommand}" HorizontalAlignment="Right" Height="{Binding Width, Mode=OneWay, RelativeSource={RelativeSource Self}}" 
                                                    IsTabStop="False" Style="{DynamicResource ChromelessButtonStyle}" VerticalAlignment="Center" Grid.Column="1">
                                            <Button.Resources>
                                                <Canvas x:Key="tabitem_close" Clip="F1M0,0L76,0 76,76 0,76 0,0" Height="76" Width="76">
                                                    <Path Data="F1M26.9166,22.1667L37.9999,33.25 49.0832,22.1668 53.8332,26.9168 42.7499,38 53.8332,49.0834 49.0833,53.8334 37.9999,42.75 26.9166,53.8334 22.1666,49.0833 33.25,38 22.1667,26.9167 26.9166,22.1667z" Fill="{DynamicResource BlackBrush}" Height="31.6667" Canvas.Left="22.1666" Stretch="Fill" Canvas.Top="22.1667" Width="31.6666"/>
                                                </Canvas>
                                            </Button.Resources>
                                            <Button.OpacityMask>
                                                <VisualBrush Stretch="Uniform">
                                                    <VisualBrush.Visual>
                                                        <Canvas Clip="F1M0,0L76,0 76,76 0,76 0,0" Height="76" Width="76">
                                                            <Path Data="F1M26.9166,22.1667L37.9999,33.25 49.0832,22.1668 53.8332,26.9168 42.7499,38 53.8332,49.0834 49.0833,53.8334 37.9999,42.75 26.9166,53.8334 22.1666,49.0833 33.25,38 22.1667,26.9167 26.9166,22.1667z" Fill="{DynamicResource BlackBrush}" Height="31.6667" Canvas.Left="22.1666" Stretch="Fill" Canvas.Top="22.1667" Width="31.6666"/>
                                                        </Canvas>
                                                    </VisualBrush.Visual>
                                                </VisualBrush>
                                            </Button.OpacityMask>
                                        </Button>
                                    </Grid>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" TargetName="PART_CloseButton" Value="{DynamicResource AppBaseBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource FileTabBrush}"/>
                                    <Setter Property="TextElement.FontWeight" TargetName="ContentSite" Value="SemiBold"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="False">
                                    <Setter Property="Background" TargetName="PART_CloseButton" Value="White"/>
                                    <Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="White"/>
                                </Trigger>
                                <!--If hovering over unselected tab-->
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsSelected"  Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="{DynamicResource TabHoverBrush}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GroupBoxStyle" TargetType="{x:Type GroupBox}">
                <Setter Property="BorderBrush" Value="{DynamicResource AppBaseBrush}"/>
                <Setter Property="Foreground" Value="white"/>
                <Setter Property="Margin" Value="0,0,0,-5"/>
                <Setter Property="Padding" Value="5,0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <Separator Grid.Column="2" Grid.Row="0" Height="30" Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" HorizontalAlignment="Right"/>

                                <Border x:Name="Content" Grid.Row="0" Grid.Column="1" Margin="7,0">
                                    <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                                </Border>

                                <Border x:Name="Header" Grid.Row="1" Grid.Column="1" Padding="2,1,2,1" Background="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
            			         Margin="0,0,0,10">
                                    <ContentPresenter Content="{TemplateBinding Header}" HorizontalAlignment="Center" />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Header" Value="">
                                    <Setter TargetName="Header" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Content" Property="Margin" Value="7,0,7,5"/>
                                </Trigger>
                                <Trigger Property="Header" Value="{x:Null}">
                                    <Setter TargetName="Header" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Content" Property="Margin" Value="7,0,7,5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>

                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="EmptyTrashLabelStyle" TargetType="{x:Type Label}">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="Padding" Value="0"/>
            </Style>

            <Style TargetType="ListBox">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListBox">
                            <Border CornerRadius="5" Background="{TemplateBinding ListBox.Background}">
                                <ScrollViewer HorizontalScrollBarVisibility="Auto">
                                    <StackPanel Orientation="Horizontal"
                       VerticalAlignment="Center"
                       HorizontalAlignment="Center"
                       IsItemsHost="True"/>
                                </ScrollViewer>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GridViewTooltipStyle" TargetType="{x:Type GroupBox}">
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" FontWeight="Bold"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <StackPanel Orientation="Horizontal">
                                <Border x:Name="Header">
                                    <ContentPresenter Content="{TemplateBinding Header}" Grid.Column="0"/>
                                </Border>
                                <Border x:Name="Content">
                                    <ContentPresenter Content="{TemplateBinding Content}" Grid.Column="1"/>
                                </Border>
                            </StackPanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Content" Value="">
                                    <Setter TargetName="Header" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Content" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="Content" Value="{x:Null}">
                                    <Setter TargetName="Header" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Content" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DataGridStyle" TargetType="DataGrid" BasedOn="{StaticResource MetroDataGrid}">
                <Setter Property="AlternatingRowBackground"
                            Value="{DynamicResource GrayBrush10}" />
            </Style>

            <Style x:Key="QuickAccessButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Margin" Value="3,0"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource TabHoverBrush}"/>
                        <Setter Property="Foreground" Value="#ffffff"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToolBar}">
                            <Border>
                                <DockPanel>
                                    <Thumb Visibility="Collapsed"/>

                                    <ToolBarPanel x:Name="PART_ToolBarPanel"
                                          IsItemsHost="true"
                                          Margin="0" />
                                </DockPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
